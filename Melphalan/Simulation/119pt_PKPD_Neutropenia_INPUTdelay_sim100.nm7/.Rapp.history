#Define UI and Server for PipPrototypeApp#
#Load package libraries#
library(shiny)#
library(shinydashboard)#
library(ggplot2)  #Plotting#
library(grid)  #Plotting#
library(plyr)  #ddply function#
library(compiler)  #Compile repeatedly called functions#
#
#-------------------------------------------------------------------------------------#
#Elements that only need to run once on application start-up#
#Use custom ggplot2 theme#
theme_bw2 <- theme_set(theme_bw(base_size = 16))#
theme_bw2 <- theme_update(plot.margin = unit(c(1.1,1.1,3,1.1), "lines"),#
                          axis.title.x=element_text(size = 16, vjust = 0),#
                          axis.title.y=element_text(size = 16, vjust = 0, angle = 90),#
                          strip.text.x=element_text(size = 14),#
                          strip.text.y=element_text(size = 14, angle = 90))#
#
#Describe population model#
#1-compartment IV infusion#
#Define parameter values#
#Thetas#
POPCL <- 9.14  #Clearance, L/hour#
POPV <- 12.2  #Volume, L#
COVCRCL <- 4.6#
COVWT <- 9.49#
#Omegas (as SD)#
PPVCL <- 31.1/100#
PPVV <- 38.0/100#
#Epsilons (as SD)#
ERRPRO <- 9.33/100  #Proportional residual error (log-normally distributed)#
#
#Set up a data frame of individuals in order to calculate and plot concentration confidence intervals#
n <- 50	#This is hard coded - no reason for a user to change this number#
ID <- seq(from = 1, to = n, by = 1)#
#
#Time interval#
TINT <- 0.5#
#
#Calculate concentrations at each time-point for the individual#
#Function for calculating concentrations in a loop#
conc.function <- function(df){#
  #Set initial values in the central compartment#
	for(i in 2:nrow(df)) {#
		df$A1[df$TIME == 0] <- 0  #Drug amount in the central compartment at time zero#
		df$IPRE[df$TIME == 0] <- 0  #Drug concentration in the central compartment at time zero#
		df$CLgrp <- df$CL + COVCRCL^(df$CRCL/68.7) #Effect of CrCL on CL#
		df$Vgrp <- df$V + COVWT^(df$WT/61.1)  #Effect of WT on V#
		KE <- df$CLgrp[i]/df$Vgrp[i]  #Elimination rate-constant#
		time <- df$TIME[i]-df$TIME[i-1]#
		A1.prev <- df$A1[i-1]#
		dose.rate <- df$RATE[i]#
		df$A1[i] <- dose.rate/KE*(1-exp(-time*KE))+A1.prev*exp(-time*KE) #Amount#
		df$IPRE[i] <- df$A1[i]/df$Vgrp[i] #Concentration#
	}#
	df#
}#
conc.function.cmpf <- cmpfun(conc.function)#
#
#Functions for calculating confidence intervals#
CI95lo <- function(x) quantile(x, probs=0.025)#
CI95hi <- function(x) quantile(x, probs=0.975)#
#
#Returns a single value for each ID of dataframe#
oneperID <- function(x) {#
	ID <- tail(x, n=1)#
	ID#
}#
#
#Read in previous saved data#
dir <- "/Volumes/Prosecutor/PhD/Bayes Estimation/Aminoglycosides/PipPrototypeApp/"#
saved.data <- read.csv(paste(dir,"saved_data.csv",sep=""), stringsAsFactors=F, na.strings=".")#
#
#-------------------------------------------------------------------------------------#
#Define the "server" part of the Shiny application#
server <- function(input,output,session) {#
#
############
##_INPUT_###
############
#Make a reactive expression that calls in the prior concentrations and their corresponding time-points#
rOBS.data <- reactive({#
	#Define TIME sequence dependent on the dosing frequency and the number of previous doses#
		#Dosing frequency#
		if (input$PFREQ == 1) {PFREQ <- 4}#
		if (input$PFREQ == 2) {PFREQ <- 6}#
		if (input$PFREQ == 3) {PFREQ <- 8}#
		#Number of previous doses#
		if (input$NPDOSE == 1) {NPDOSE <- 0}#
		if (input$NPDOSE == 2) {NPDOSE <- 1}#
		if (input$NPDOSE == 3) {NPDOSE <- 2}#
		if (input$NPDOSE == 4) {NPDOSE <- 3}#
		#TIME#
		TIME <- seq(from=0, to = NPDOSE*PFREQ+PFREQ, by=TINT) #Time elapsed by previous doses + Time for sampled dose + Time for 3 simulated doses#
	#Set up a data frame of individuals in order to calculate and plot concentration confidence intervals#
	ID.1 <- rep(1, times=length(TIME))#
	#Call in patient specific data#
	AGE <- input$AGE  #Patient's age (years)#
	WT <- input$WT  #Patient's ideal body weight (kg)#
	SEX <- input$SEX  #Patient's gender (1 = Male, 2 = Female)#
	SECR <- input$SECR  #Patient's serum creatinine (Âµmol/L)#
		#Calculate creatinine clearance for the individual#
		if (input$SEX == 1) {CRCL <- ((140-AGE)*WT*1.23)/SECR}#
		if (input$SEX == 2) {CRCL <- ((140-AGE)*WT*1.04)/SECR}#
		#Calculate individual's effect of CRCL and WT to CL and V, respectively#
		iCOVCRCL <- COVCRCL^(CRCL/68.7)  #Effect of CrCL on CL#
		iCOVWT <- COVWT^(WT/61.1)  #Effect of WT on V#
	#Call in previous concentrations and their corresponding times#
	DV <- rep(NA, times = length(TIME))#
	PCONC1 <- input$PCONC1	#There is always a PCONC1!#
	PTIME1 <- input$PTIME1#
	DV[TIME == NPDOSE*PFREQ+PTIME1] <- PCONC1#
	PCONC2 <- NA#
	PTIME2 <- NA#
	PCONC3 <- NA#
	PTIME3 <- NA#
	PCONC4 <- NA#
	PTIME4 <- NA#
	if (input$NCONC >= 2) {#
		PCONC2 <- input$PCONC2#
		PTIME2 <- input$PTIME2#
		DV[TIME == NPDOSE*PFREQ+PTIME2] <- PCONC2#
	}#
	if (input$NCONC >= 3) {#
		PCONC3 <- input$PCONC3#
		PTIME3 <- input$PTIME3#
		DV[TIME == NPDOSE*PFREQ+PTIME3] <- PCONC3#
	}#
	if (input$NCONC == 4) {#
		PCONC4 <- input$PCONC4#
		PTIME4 <- input$PTIME4#
		DV[TIME == NPDOSE*PFREQ+PTIME4] <- PCONC4#
	}#
  #Setting up the infusion and dosing event information#
  PDOSE <- input$PDOSE	#Dose (Amount)#
  PINFD <- input$PINFD	#Infusion Duration (hours)#
	RATET <- PDOSE/PINFD	#"Temporary Rate"; Dose (Amount)/Infusion Duration (hours)#
	INFEND <- PINFD+TINT	#Time interval when infusion ended#
	END <- max(TIME)+PFREQ	#A time-point long after the specified dosing time#
		#Vector marking infusion's time events (dependent on the number of previous doses)#
		#PFREQ+TINT; time interval when next infusion is started#
		#PFREQ+INFEND; time when infusion stopped#
		#Vector marking infusion's rates (dependent on the number of previous doses)#
		if (NPDOSE == 0) {	#1st dose is sampled dose#
		TIMEinf <- c(0,INFEND,END)#
		RATEinf <- c(RATET,0,0)#
		}#
		if (NPDOSE == 1) {	#2nd dose is sampled dose#
		TIMEinf <- c(0,INFEND,PFREQ+TINT,PFREQ+INFEND,END)#
		RATEinf <- c(RATET,0,RATET,0,0)#
		}#
		if (NPDOSE == 2) {	#3rd dose is sampled dose#
		TIMEinf <- c(0,INFEND,PFREQ+TINT,PFREQ+INFEND,2*PFREQ+TINT,2*PFREQ+INFEND,END)#
		RATEinf <- c(RATET,0,RATET,0,RATET,0,0)#
		}#
		if (NPDOSE == 3) {	#4th dose is sampled dose#
		TIMEinf <- c(0,INFEND,PFREQ+TINT,PFREQ+INFEND,2*PFREQ+TINT,2*PFREQ+INFEND,3*PFREQ+TINT,3*PFREQ+INFEND,END)#
		RATEinf <- c(RATET,0,RATET,0,RATET,0,RATET,0,0)#
		}		#
		#Define an interpolation function that returns rate when given time - "const"#
		step.doseinf <- approxfun(TIMEinf, RATEinf, method = "const")#
		RATE <- step.doseinf(TIME)	#
	#Make a data frame of previous concentrations and patient's characteristics#
	IPRE <- 0#
	OBS.data <- data.frame("ID"=ID.1,TIME,RATE,"CL"=iCOVCRCL,"V"=iCOVWT,IPRE,DV,"CRCL"=CRCL,"WT"=WT)#
	as.data.frame(OBS.data)#
})#
#
#Make a reactive expression that calls in the prior concentrations and their corresponding time-points and parts of the population model to estimate new parameters for the individual#
rBAYES.data <- reactive({#
	bayes.function <- function(OBS.data) {#
		#Use the patient's posterior information and the prior population model to estimate values of CL and V for the individual#
		#Bayes Objective Function Value#
		bayes.ofv <- function(par) {#
			CLfit <- par[1]#
			Vfit <- par[2]#
			OBS.data$CL <- CLfit#
			OBS.data$V <- Vfit#
			iCOVCRCL <- COVCRCL^(OBS.data$CRCL[1]/68.7)#
			iCOVWT <- COVWT^(OBS.data$WT[1]/61.1)#
				#Population model information for "bayes.function"#
				CLprior <- POPCL+iCOVCRCL#
				CLbsvprior <- PPVCL#
				Vprior <- POPV+iCOVWT#
				Vbsvprior <- PPVV#
				Cprior <- 0  #Correlation between CL and V#
				sigma <- ERRPRO#
			#Calculate concentrations using the "fit" parameters#
			CONC.data <- conc.function.cmpf(OBS.data)#
			#If DV was NA, IPRE needs to be NA too (for calculating log-likelihood)#
			CONC.data$IPRE[is.na(CONC.data$DV) == T] <- NA#
			DV2 <- CONC.data$DV[is.na(CONC.data$DV)==F]  #DV as a vector#
			IPRE2 <- CONC.data$IPRE[is.na(CONC.data$IPRE)==F] #IPRE as a vector#
			#Posterior component (from the data)#
			#Log densities of residuals#
			#Residual error model, Y = IPRE*exp(ERR), log(Y) = log(IPRE) + ERR#
			loglikpost <- dnorm(log(na.omit(DV2)), mean=log(na.omit(IPRE2)), sd=sigma, log=T)#
			#Prior component (from the model)#
			ETA <- log(c(CLfit+iCOVCRCL,Vfit+iCOVWT)/c(CLprior,Vprior))#
			ETABSV <- c(CLbsvprior,Vbsvprior)#
			loglikprior <- dnorm(ETA, mean=0, sd=ETABSV, log=T)#
			#Calculate the combined likelihood#
			OFVbayes <- -1*sum(loglikpost,loglikprior)#
			OFVbayes  #Optimise the Bayes Objective Function Value#
		}#
	#Parameter estimates#
	par <- c(CLprior,Vprior)#
	#Optimise#
	bayes.ofv.cmpf <- cmpfun(bayes.ofv)#
	BAYES.data <- optim(par, bayes.ofv.cmpf, method="L-BFGS-B", lower=c(0.001,0.001), upper=c(Inf,Inf), control = list(parscale=par, factr=1e3), hessian=TRUE)#
	BAYES.data#
	}#
	bayes.function.cmpf <- cmpfun(bayes.function)#
	BAYES.data <- bayes.function.cmpf(rOBS.data())#
})#
#
#Extract results from rBAYES.data and make a new data frame of concentrations calculated using the new fitted parameters#
rFIT.data <- reactive({#
	fit.function <- function(BAYES.data,OBS.data) {#
		OBS.data$CL <- BAYES.data$par[1]#
		OBS.data$V <- BAYES.data$par[2]#
		#Calculate concentrations at each time-point#
		FIT.data <- conc.function.cmpf(OBS.data)#
	}#
	fit.function.cmpf <- cmpfun(fit.function)#
	FIT.data <- fit.function.cmpf(rBAYES.data(),rOBS.data())#
	as.data.frame(FIT.data)#
})#
#
#################
##_rSIM.data1_###
#################
#Extract results from rBAYES.data and simulate what the next dose would be#
#Requires rBAYES.data for estimates of CL and V#
#Requires rFIT.data for the last concentrations and amounts#
#Requires rOBS.data for the population CL and V values#
rSIM.data1 <- reactive({#
	sim.function <- function(BAYES.data,FIT.data,OBS.data) {#
		#Setting up the new infusion and new dosing event information#
		SDOSE1 <- input$SDOSE1	#Dose (Amount)#
		SINFD1 <- input$SINFD1	#Infusion Duration (hours)#
		RATES <- SDOSE1/SINFD1	#"Temporary Simulated Rate"; Dose (Amount)/Infusion Duration (hours)#
		INFEND <- SINFD1+TINT	#Time interval when infusion ended#
		#New TIME sequence#
		TIME.prev <- tail(FIT.data$TIME,1) #Last time point in OBS.data from which simulated dose starts from#
		if (input$SFREQ1 == 1) {SFREQ1 <- 4}#
		if (input$SFREQ1 == 2) {SFREQ1 <- 6}#
		if (input$SFREQ1 == 3) {SFREQ1 <- 8}#
		TIMES <- seq(from=TIME.prev, to=TIME.prev+3*SFREQ1, by=TINT)#
		END <- max(TIMES)+SFREQ1	#A time-point long after the specified dosing time#
			#Vector marking infusion's time events (dependent on the number of previous doses)#
			#SFREQ+TINT; time interval when next infusion is started#
			#SFREQ+INFEND; time when infusion stopped#
			#Vector marking infusion's rates (dependent on the number of previous doses)#
			TIMEinf <- TIME.prev + c(0,INFEND,SFREQ1+TINT,SFREQ1+INFEND,2*SFREQ1+TINT,2*SFREQ1+INFEND,END)#
			RATEinf <- c(RATES,0,RATES,0,RATES,0,0)#
			#Define an interpolation function that returns rate when given time - "const"#
			step.doseinf <- approxfun(TIMEinf, RATEinf, method="const")#
			RATE <- step.doseinf(TIMES)#
		#Patient parameters#
		CL <- BAYES.data$par[1]#
		V <- BAYES.data$par[2]#
		#Call in the drug amount from the previous dose#
		AMT.prev <- FIT.data$A1[FIT.data$TIME == TIME.prev]#
		CONC.prev <- FIT.data$IPRE[FIT.data$TIME == TIME.prev]#
		#Make a data frame of previous parameters and patient's characteristics#
		SIM.data1 <- data.frame(ID=1,TIME=TIMES,RATE,CL,V,IPRE=NA,DV=NA,CRCL=OBS.data$CRCL[1],WT=OBS.data$WT[1])#
		#Calculate concentrations at each time-point for the individual (for the next dose)#
		#Function for calculating concentrations in a loop#
		sim.conc.function <- function(SIM.data1){#
			for(i in 2:nrow(SIM.data1)) {#
				SIM.data1$A1[SIM.data1$TIME == TIME.prev] <- AMT.prev  #Drug amount in the central compartment at time of next dose#
				SIM.data1$IPRE[SIM.data1$TIME == TIME.prev] <- CONC.prev  #Concentration in the central compartment at time of next dose#
				SIM.data1$CLgrp <- SIM.data1$CL + COVCRCL^(OBS.data$CRCL[1]/68.7) #Effect of CrCL on CL#
				SIM.data1$Vgrp <- SIM.data1$V + COVWT^(OBS.data$WT[1]/61.1)  #Effect of WT on V#
				KE <- SIM.data1$CLgrp[i]/SIM.data1$Vgrp[i]  #Elimination rate-constant#
				time <- SIM.data1$TIME[i]-SIM.data1$TIME[i-1]#
				A1.prev <- SIM.data1$A1[i-1]#
				dose.rate <- SIM.data1$RATE[i]#
				SIM.data1$A1[i] <- dose.rate/KE*(1-exp(-time*KE))+A1.prev*exp(-time*KE) #Amount#
				SIM.data1$IPRE[i] <- SIM.data1$A1[i]/SIM.data1$Vgrp[i] #Concentration#
			}#
			SIM.data1#
		}#
		sim.conc.function.cmpf <- cmpfun(sim.conc.function)#
		SIM.data1 <- sim.conc.function.cmpf(SIM.data1)#
	}#
	sim.function.cmpf <- cmpfun(sim.function)#
	SIM.data1 <- sim.function.cmpf(rBAYES.data(),rFIT.data(),rOBS.data())#
	as.data.frame(SIM.data1)#
})#
#
#################
##_rSIM.data2_###
#################
#Extract results from rBAYES.data and simulate what the next dose would be#
#Requires rBAYES.data for estimates of CL and V#
#Requires rFIT.data for the last concentrations and amounts#
#Requires rOBS.data for the population CL and V values#
rSIM.data2 <- reactive({#
	sim.function <- function(BAYES.data,FIT.data,OBS.data) {#
		#Setting up the new infusion and new dosing event information#
		SDOSE2 <- input$SDOSE2	#Dose (Amount)#
		SINFD2 <- input$SINFD2	#Infusion Duration (hours)#
		RATES <- SDOSE2/SINFD2	#"Temporary Simulated Rate"; Dose (Amount)/Infusion Duration (hours)#
		INFEND <- SINFD2+TINT	#Time interval when infusion ended#
		#New TIME sequence#
		TIME.prev <- tail(FIT.data$TIME,1) #Last time point in OBS.data from which simulated dose starts from#
		if (input$SFREQ2 == 1) {SFREQ2 <- 4}#
		if (input$SFREQ2 == 2) {SFREQ2 <- 6}#
		if (input$SFREQ2 == 3) {SFREQ2 <- 8}#
		TIMES <- seq(from=TIME.prev, to=TIME.prev+3*SFREQ2, by=TINT)#
		END <- max(TIMES)+SFREQ2	#A time-point long after the specified dosing time#
			#Vector marking infusion's time events (dependent on the number of previous doses)#
			#SFREQ+TINT; time interval when next infusion is started#
			#SFREQ+INFEND; time when infusion stopped#
			#Vector marking infusion's rates (dependent on the number of previous doses)#
			TIMEinf <- TIME.prev + c(0,INFEND,SFREQ2+TINT,SFREQ2+INFEND,2*SFREQ2+TINT,2*SFREQ2+INFEND,END)#
			RATEinf <- c(RATES,0,RATES,0,RATES,0,0)#
			#Define an interpolation function that returns rate when given time - "const"#
			step.doseinf <- approxfun(TIMEinf, RATEinf, method="const")#
			RATE <- step.doseinf(TIMES)#
		#Patient parameters#
		CL <- BAYES.data$par[1]#
		V <- BAYES.data$par[2]#
		#Call in the drug amount from the previous dose#
		AMT.prev <- FIT.data$A1[FIT.data$TIME == TIME.prev]#
		CONC.prev <- FIT.data$IPRE[FIT.data$TIME == TIME.prev]#
		#Make a data frame of previous parameters and patient's characteristics#
		SIM.data2 <- data.frame(ID=1,TIME=TIMES,RATE,CL,V,IPRE=NA,DV=NA,CRCL=OBS.data$CRCL[1],WT=OBS.data$WT[1])#
		#Calculate concentrations at each time-point for the individual (for the next dose)#
		#Function for calculating concentrations in a loop#
		sim.conc.function <- function(SIM.data2){#
			for(i in 2:nrow(SIM.data2)) {#
				SIM.data2$A1[SIM.data2$TIME == TIME.prev] <- AMT.prev  #Drug amount in the central compartment at time of next dose#
				SIM.data2$IPRE[SIM.data2$TIME == TIME.prev] <- CONC.prev  #Concentration in the central compartment at time of next dose#
				SIM.data2$CLgrp <- SIM.data2$CL + COVCRCL^(OBS.data$CRCL[1]/68.7) #Effect of CrCL on CL#
				SIM.data2$Vgrp <- SIM.data2$V + COVWT^(OBS.data$WT[1]/61.1)  #Effect of WT on V#
				KE <- SIM.data2$CLgrp[i]/SIM.data2$Vgrp[i]  #Elimination rate-constant#
				time <- SIM.data2$TIME[i]-SIM.data2$TIME[i-1]#
				A1.prev <- SIM.data2$A1[i-1]#
				dose.rate <- SIM.data2$RATE[i]#
				SIM.data2$A1[i] <- dose.rate/KE*(1-exp(-time*KE))+A1.prev*exp(-time*KE) #Amount#
				SIM.data2$IPRE[i] <- SIM.data2$A1[i]/SIM.data2$Vgrp[i] #Concentration#
			}#
			SIM.data2#
		}#
		sim.conc.function.cmpf <- cmpfun(sim.conc.function)#
		SIM.data2 <- sim.conc.function.cmpf(SIM.data2)#
	}#
	sim.function.cmpf <- cmpfun(sim.function)#
	SIM.data2 <- sim.function.cmpf(rBAYES.data(),rFIT.data(),rOBS.data())#
	as.data.frame(SIM.data2)#
})#
#
################
##_rCI.data1_###
################
#Extract results from rBAYES.data and rSIM.data1, and make a new data frame of concentrations calculated using the new fitted parameters to create confidence intervals!#
rCI.data1 <- reactive({#
	ci.function <- function(BAYES.data,OBS.data,SIM.data1) {#
		#Last time-point in OBS.data#
		TIME.prev <- tail(OBS.data$TIME,1)#
		#Repeat OBS.data by the number of pre-specified ID's to calculate confidence intervals#
		REP.OBS.data <- lapply(OBS.data, rep.int, times=length(ID))#
		REP.OBS.data <- as.data.frame(REP.OBS.data)#
		#Remove existing CL and V columns#
		REP.OBS.data <- REP.OBS.data[c(-4,-5)]#
		ID.OBS <- rep(ID, times=length(OBS.data$TIME))#
		ID.OBS <- sort(ID.OBS)#
		REP.OBS.data$ID <- ID.OBS	#
			#Repeat SIM.data1 by the number of pre-specified ID's to calculate confidence intervals#
			REP.SIM.data1 <- lapply(SIM.data1, rep.int, times=length(ID))#
			REP.SIM.data1 <- as.data.frame(REP.SIM.data1)#
			#Remove existing CL, V, A1, CLgrp and Vgrp columns#
			ID.SIM <- rep(ID, times=length(SIM.data1$TIME))#
			ID.SIM <- sort(ID.SIM)#
			REP.SIM.data1$ID <- ID.SIM#
			REP.SIM.data1 <- REP.SIM.data1[c(-4,-5,-10,-11,-12)]#
			#Remove the first row from each individual (should be in REP.OBS.data as the last row)#
			REP.SIM.data1 <- REP.SIM.data1[REP.SIM.data1$TIME != TIME.prev,]#
				#rbind REP.OBS.data and REP.SIM.data1#
				REP.data <- rbind(REP.OBS.data,REP.SIM.data1)#
				REP.data <- REP.data[with(REP.data, order(REP.data$ID,REP.data$TIME)), ]	#
		#Confidence intervals#
		#Calculate standard errors for individual parameter estimates#
		#Assign the R matrix to the Hessian returned by optim#
		Rmatrix <- BAYES.data$hessian#
		#Calculate the variance-covariance matrix#
		VCmatrix <- solve(Rmatrix)#
		#Calculate the parameter standard errors#
		se.par <- sqrt(diag(VCmatrix))#
		#Calculate parameter standard errors as a percentage (CL, V)#
		ERR.CL <- rnorm(n, mean=BAYES.data$par[1], sd=se.par[1])#
		ERR.V <- rnorm(n, mean=BAYES.data$par[2], sd=se.par[2])#
		#Make a data frame	#
		IND.data <- data.frame(ID=ID, CL=ERR.CL, V=ERR.V)#
		MULTI.data <- merge(IND.data,REP.data,by=c("ID"),all=T)#
		#Calculate concentrations at each time-point for each individual#
		CI.data1 <- conc.function.cmpf(MULTI.data)#
	}#
	ci.function.cmpf <- cmpfun(ci.function)#
	CI.data1 <- ci.function(rBAYES.data(),rOBS.data(),rSIM.data1())#
	as.data.frame(CI.data1)#
})#
#
################
##_rCI.data2_###
################
#Extract results from rBAYES.data and rSIM.data2, and make a new data frame of concentrations calculated using the new fitted parameters to create confidence intervals!#
rCI.data2 <- reactive({#
	ci.function <- function(BAYES.data,OBS.data,SIM.data2) {#
		#Last time-point in OBS.data#
		TIME.prev <- tail(OBS.data$TIME,1)#
		#Repeat OBS.data by the number of pre-specified ID's to calculate confidence intervals#
		REP.OBS.data <- lapply(OBS.data, rep.int, times=length(ID))#
		REP.OBS.data <- as.data.frame(REP.OBS.data)#
		#Remove existing CL and V columns#
		REP.OBS.data <- REP.OBS.data[c(-4,-5)]#
		ID.OBS <- rep(ID, times=length(OBS.data$TIME))#
		ID.OBS <- sort(ID.OBS)#
		REP.OBS.data$ID <- ID.OBS	#
			#Repeat SIM.data2 by the number of pre-specified ID's to calculate confidence intervals#
			REP.SIM.data2 <- lapply(SIM.data2, rep.int, times=length(ID))#
			REP.SIM.data2 <- as.data.frame(REP.SIM.data2)#
			#Remove existing CL, V, A1, CLgrp and Vgrp columns#
			ID.SIM <- rep(ID, times=length(SIM.data2$TIME))#
			ID.SIM <- sort(ID.SIM)#
			REP.SIM.data2$ID <- ID.SIM#
			REP.SIM.data2 <- REP.SIM.data2[c(-4,-5,-10,-11,-12)]#
			#Remove the first row from each individual (should be in REP.OBS.data as the last row)#
			REP.SIM.data2 <- REP.SIM.data2[REP.SIM.data2$TIME != TIME.prev,]#
				#rbind REP.OBS.data and REP.SIM.data2#
				REP.data <- rbind(REP.OBS.data,REP.SIM.data2)#
				REP.data <- REP.data[with(REP.data, order(REP.data$ID,REP.data$TIME)), ]	#
		#Confidence intervals#
		#Calculate standard errors for individual parameter estimates#
		#Assign the R matrix to the Hessian returned by optim#
		Rmatrix <- BAYES.data$hessian#
		#Calculate the variance-covariance matrix#
		VCmatrix <- solve(Rmatrix)#
		#Calculate the parameter standard errors#
		se.par <- sqrt(diag(VCmatrix))#
		#Calculate parameter standard errors as a percentage (CL, V)#
		ERR.CL <- rnorm(n, mean=BAYES.data$par[1], sd=se.par[1])#
		ERR.V <- rnorm(n, mean=BAYES.data$par[2], sd=se.par[2])#
		#Make a data frame	#
		IND.data <- data.frame(ID=ID, CL=ERR.CL, V=ERR.V)#
		MULTI.data <- merge(IND.data,REP.data,by=c("ID"),all=T)#
		#Calculate concentrations at each time-point for each individual#
		CI.data2 <- conc.function.cmpf(MULTI.data)#
	}#
	ci.function.cmpf <- cmpfun(ci.function)#
	CI.data2 <- ci.function(rBAYES.data(),rOBS.data(),rSIM.data2())#
	as.data.frame(CI.data2)#
})#
#
##Calculate the time above MIC#
##Uses rFIT.data for calculating time above MIC for fitted concentrations#
##Uses rSIM.data for calculating time above MIC for simulated concentrations#
#rMIC.data <- reactive({#
#	mic.function <- function(FIT.data,SIM.data) {#
#		if (input$SIMNEW == FALSE) {#
#			EMIC.data <- subset(FIT.data, ICONC > 20)#
#			time.EMIC <- max(EMIC.data$TIME) - min(EMIC.data$TIME)#
#			time.SMIC <- NA#
#			time.MIC <- data.frame(EMIC = time.EMIC, SMIC = time.SMIC)#
#		}#
#		#
#		if (input$SIMNEW == TRUE) {#
#			EMIC.data <- subset(FIT.data, ICONC > 20)#
#			time.EMIC <- max(EMIC.data$TIME) - min(EMIC.data$TIME)			#
#			SMIC.data <- subset(SIM.data, SCONC > 20)#
#			time.SMIC <- max(SMIC.data$TIME) - min(SMIC.data$TIME)#
#			time.MIC <- data.frame(EMIC = time.EMIC, SMIC = time.SMIC)			#
#		}#
#		time.MIC#
#	}	#
#	MIC.data <- mic.function(rFIT.data(),rSIM.data())#
#})#
#
#Extract input information AND individual bayes estimates and add to "saved_data.csv"#
rNEW.data <- reactive({#
	#Assign labels to SEX#
	if (input$SEX == 1) {SEXf <- "Male"}#
	if (input$SEX == 2) {SEXf <- "Female"}#
	#Assign NA's to CONCs and TIMEs#
	PCONC2 <- NA#
	PTIME2 <- NA#
	PCONC3 <- NA#
	PTIME3 <- NA#
	PCONC4 <- NA#
	PTIME4 <- NA#
	#Call in previous concentrations in their corresponding times#
	if (input$NCONC >= 2) {#
		PCONC2 <- input$PCONC2#
		PTIME2 <- input$PTIME2#
	}#
	if (input$NCONC >= 3) {#
		PCONC3 <- input$PCONC3#
		PTIME3 <- input$PTIME3#
	}#
	if (input$NCONC == 4) {#
		PCONC4 <- input$PCONC4#
		PTIME4 <- input$PTIME4#
	}#
	save.ind.function <- function(OBS.data,BAYES.data) {#
	#Make a data frame for the individual to be added to saved.data (via rbind)#
	ind.data <- data.frame(URN = input$URN,#
													First.Name = input$FNAME,#
													Last.Name = input$LNAME,#
													AGE = input$AGE,#
													SECR = input$SECR,#
													WT = input$WT,#
													SEX = SEXf,#
													CRCL = round(OBS.data$CRCL[1], digits = 2),#
													PDOSE = input$PDOSE,#
													PINFD = input$PINFD,#
													PCONC1 = input$PCONC1,#
													PTIME1 = input$PTIME1,#
													PCONC2,#
													PTIME2,#
													PCONC3,#
													PTIME3,#
													PCONC4,#
													PTIME4,#
													CL = round(BAYES.data$par[1], digits = 2),#
													V = round(BAYES.data$par[2], digits = 2),#
													SDOSE1 = input$SDOSE1,#
													SINFD1 = input$SINFD1,#
													Pharmacist = input$PHARMI)#
	new.data <- rbind(saved.data,ind.data)#
	}	#
	NEW.data <- save.ind.function(rOBS.data(),rBAYES.data())#
})#
#Don't add individual's data to existing file until button is clicked#
observe({#
	if (input$ADD == T) {	#Linked to action button for adding ind.data to "saved_data.csv"#
		isolate({	#Needs to be isolated so that user can select when to add data to the saved.data data frame#
			write.csv(rNEW.data(), file=paste(dir,"saved_data.csv",sep=""), na=".", quote=F, row.names=F)#
		})	#Brackets closing "isolate"#
	}	#
})#
#
##############
###_OUTPUT_###
##############
##Create text output for the patient's name pasted with URN#
#output$patientnameText <- renderText({#
#	paste(input$FNAME,input$LNAME,"( URN:",input$URN,")",sep=" ")#
#})#
##Create text output for patient's age#
#output$AGEText <- renderText({#
#	paste("Age:",input$AGE,"years",sep=" ")#
#})#
##Create text output for patient's gender#
#output$SEXText <- renderText({#
#	if (input$SEX == 1) { SEXText <- "Male" }#
#	if (input$SEX == 2) { SEXText <- "Female" }#
#	print(SEXText)#
#})#
##Create text output for patient's weight#
#output$WTText <- renderText({#
#	paste("Weight:",input$WT,"kg",sep=" ")#
#})#
##Create output for individual value for CRCL#
#output$CRCLText <- renderText({#
#	parameter.function <- function(OBS.data) {#
#		paste("CrCL:", round(OBS.data$CRCL[1], digits = 2), "mL/min",sep=" ")#
#	}#
#	output.text <- parameter.function(rOBS.data())#
#})#
#Plot the population predicted and individual Bayes predicted concentrations#
output$concPlot1 <- renderPlot({#
	#Create a function that calculates the maximum concentration for the scale#
	max.function <- function(FIT.data,CI.data1,SIM.data1) {#
		max(c(FIT.data$IPRE,CI.data1$IPRE,SIM.data1$IPRE))#
	}#
	max.CONC <- max.function(rFIT.data(),rCI.data1(),rSIM.data1())#
#
	#Plot#
	plotobj1 <- NULL#
	plotobj1 <- ggplot(rFIT.data())#
	plotobj1 <- plotobj1 + geom_line(aes(x = TIME, y = IPRE), size = 1, colour = "blue")  #Blue line = bayes estimated#
	plotobj1 <- plotobj1 + geom_point(aes(x = TIME, y = DV), size = 4)  #Black circles = observed data used to estimate#
	plotobj1 <- plotobj1 + stat_summary(aes(x = TIME, y = IPRE), data= rCI.data1(), geom = "ribbon", fun.ymin="CI95lo", fun.ymax="CI95hi", alpha = 0.2)#
	plotobj1 <- plotobj1 + geom_line(aes(x = TIME, y = IPRE), data = rSIM.data1(), size = 1, colour = "red")  #Red line = simulated#
	plotobj1 <- plotobj1 + geom_hline(aes(yintercept = 20), linetype = "dashed")#
	plotobj1 <- plotobj1 + annotate("text", x = 0, y = 24, label = "MIC", colour = "black", size = 4)#
	plotobj1 <- plotobj1 + scale_x_continuous("\nTime (hours)")#
	plotobj1 <- plotobj1 + scale_y_continuous("Piperacillin Concentration (mg/L)\n", lim = c(0,max.CONC))#
	print(plotobj1)#
})#
#Plot the population predicted and individual Bayes predicted concentrations#
output$concPlot2 <- renderPlot({#
	#Create a function that calculates the maximum concentration for the scale#
	max.function <- function(FIT.data,CI.data2,SIM.data2) {#
		max(c(FIT.data$IPRE,CI.data2$IPRE,SIM.data2$IPRE))#
	}#
	max.CONC <- max.function(rFIT.data(),rCI.data2(),rSIM.data2())#
#
	#Plot#
	plotobj2 <- NULL#
	plotobj2 <- ggplot(rFIT.data())#
	plotobj2 <- plotobj2 + geom_line(aes(x = TIME, y = IPRE), size = 1, colour = "blue")  #Blue line = bayes estimated#
	plotobj2 <- plotobj2 + geom_point(aes(x = TIME, y = DV), size = 4)  #Black circles = observed data used to estimate#
	plotobj2 <- plotobj2 + stat_summary(aes(x = TIME, y = IPRE), data= rCI.data2(), geom = "ribbon", fun.ymin="CI95lo", fun.ymax="CI95hi", alpha = 0.2)#
	plotobj2 <- plotobj2 + geom_line(aes(x = TIME, y = IPRE), data = rSIM.data2(), size = 1, colour = "red")  #Red line = simulated#
	plotobj2 <- plotobj2 + geom_hline(aes(yintercept = 20), linetype = "dashed")#
	plotobj2 <- plotobj2 + annotate("text", x = 0, y = 24, label = "MIC", colour = "black", size = 4)#
	plotobj2 <- plotobj2 + scale_x_continuous("\nTime (hours)")#
	plotobj2 <- plotobj2 + scale_y_continuous("Piperacillin Concentration (mg/L)\n", lim = c(0,max.CONC))#
	print(plotobj2)#
})#
##Create table output for individual value for CL, V, Estimated Time Above MIC, Predicted Time Above MIC#
#output$parameterTable <- renderTable({#
#	#CL#
#	CL.parameter.function <- function(FIT.data,RSE.data) {#
#		paste(round(FIT.data$CL[1], digits = 2), " (", signif(RSE.data[1], digits = 3), " %RSE)", sep="")#
#	}#
#	CL.output.text <- CL.parameter.function(rFIT.data(),rRSE.data())#
#	#V#
#	V.parameter.function <- function(FIT.data,RSE.data) {#
#		paste(round(FIT.data$V[1], digits = 2), " (", signif(RSE.data[2], digits = 3), " %RSE)", sep="")#
#	}#
#	V.output.text <- V.parameter.function(rFIT.data(),rRSE.data())#
#	#Estimate Time Above MIC#
#	EMIC.parameter.function <- function(MIC.data) {#
#		paste(MIC.data$EMIC[1])#
#	}#
#	EMIC.output.text <- EMIC.parameter.function(rMIC.data())#
#	#Predict Time Above MIC#
#	SMIC.parameter.function <- function(MIC.data) {#
#		paste(MIC.data$SMIC[1])#
#	}#
#	SMIC.output.text <- SMIC.parameter.function(rMIC.data())#
#	#Create output table#
#	parameter.output.table <- data.frame(#
#Description = c("Clearance (L/hour)","Volume of Distribution (L)","Estimated Time Above MIC (hours)","Predicted Time Above MIC (hours)"), Value = c(CL.output.text,V.output.text,EMIC.output.text,SMIC.output.text))#
#})#
##Subset "saved.data.csv" by URN#
#output$prevTable <- renderTable({#
#	prev.data <- subset(saved.data, URN == input$URN)#
#	prev.data <- prev.data[c(1,3,9,10,19,21,23:26)]#
#	#Should make the data frame be sorted by most recent entry first#
#})#
##Calculate the prescribed infusion rate#
#output$prescribed.rateText <- renderText({#
#	paste("Infusion Rate =", round(input$PDOSE/input$PINFD, digits = 2) ,"mg/hour")#
#})#
##Calculate the prescribed infusion rate#
#output$new.rateText <- renderText({#
#	paste("Infusion Rate =", round(input$SDOSE/input$SINFD, digits = 2) ,"mg/hour")#
#})#
#
##############
##_SESSION_###
##############
#Close the R session when Chrome closes#
session$onSessionEnded(function() {#
	stopApp()#
})#
}	#Brackets closing "server"#
#
#-------------------------------------------------------------------------------------#
#Define the "ui" part of the Shiny application#
#Header#
header <- dashboardHeader(#
	title = "Piperacillin Application",#
	titleWidth = 300#
)  #Brackets closing "header"#
#
#Sidebar#
sidebar <- dashboardSidebar(#
	width = 300,  #Width of sidebar#
	sidebarMenu(#
		menuItem("1. Patient Information", tabName = "patient", icon = icon("child")),#
		menuItem("2. Dosing Information", tabName = "dosing", icon = icon("medkit")),#
		menuItem("3. Plot and Numerical Output", tabName = "graphs", icon = icon("line-chart")),#
		menuItem("About", tabName = "about", icon = icon("question"),#
			menuSubItem("Model", tabName = "model", icon = icon("angle-right"))#
		)#
	),	#Brackets closing "sidebarMenu"#
	br(),#
	fixedRow(#
		actionButton("ADD", label = "Save Individual's Data"),#
		align = "center"#
	)	#Brackets closing "fixedRow"#
)	#Brackets closing "dashboardSidebar"#
#
#Body#
body <- dashboardBody(#
	tabItems(#
		tabItem(tabName = "patient",#
			h4(strong("Patient Details:")),#
			fixedRow(#
				column(4,#
					textInput("FNAME", "First Name:", "Enter Patient's First Name..."),#
					textInput("LNAME", "Last Name:", "Enter Patient's Last Name...")#
				),#
				column(4,#
					numericInput("URN", "Unit Record Number (URN):", value = 999999, step = 1),#
					textInput("PHARMI", "Pharmacist's Initials:", "Enter Your Initials...")#
				)#
			),	#Brackets closing "fixedRow"#
			hr(),#
			h4(strong("Covariate Information:")),#
			fixedRow(#
				column(4,#
					numericInput("AGE", "Age (years):", value = 85, step = 0.1),#
					numericInput("WT", "Weight (kg):", value = 61.1, step = 0.1)#
				),#
				column(4,#
					numericInput("SECR", "Serum Creatinine (Âµmol/L):", value = 60.2, step = 0.1),#
					selectInput("SEX", "Gender:", choices = c("Male" = 1, "Female" = 2), selected = 1)#
				)#
			),	#Brackets closing "fixedRow"#
			hr(),#
			h4(strong("Previous Information:")),#
			fixedRow(#
				#tableOutput("prevTable")#
			)  #Brackets closing "fixedRow"#
		),#
		tabItem(tabName = "dosing",#
			h4(strong("Prescribed Dosing Information:")),#
			fixedRow(#
				column(5,#
					numericInput("PDOSE", "Dose Amount (mg):", value = 4000, min = 0, max = 5000, step = 100)#
				),#
				column(5,#
					selectInput("PFREQ", "Dose Frequency (hours):", choices = c("4-hourly" = 1, "6-hourly" = 2,"8-hourly" = 3), selected = 2)#
				)#
			),  #Brackets closing "fixedRow"#
			fixedRow(#
				column(5,#
					numericInput("PINFD", "Prescribed Infusion Duration (hours):", value = 3, min = 0.5, max = 8, step = 0.5)#,#
					#textOutput("prescribed.rateText")#
				),#
				column(5,#
					selectInput("NPDOSE", "Number of Previous Doses:", choices = c("No previous doses, this is the first dose" = 1, "1" = 2, "2" = 3, "3 or more previous doses (at steady state)" = 4), selected = 3)#
				)#
			),  #Brackets closing "fixedRow"#
			hr(),#
			h4(strong("Collected Concentration Information:")),#
			fixedRow(#
				column(10,#
					h5(strong("Select the number of samples that were collected during the dosing period:"))#
				)#
			),  #Brackets closing "fixedRow"#
			fixedRow(#
				column(5,#
					selectInput("NCONC", "", choices = c("1" = 1, "2" = 2, "3" = 3, "4" = 4), selected = 2)#
				)#
			),  #Brackets closing "fixedRow"#
			fixedRow(#
				column(5,#
					numericInput("PCONC1", "1: Concentration (mg/L)", value = 70, min = 0.01, step = 0.001),#
					conditionalPanel(condition = "input.NCONC >= 2",#
						numericInput("PCONC2", "2: Concentration (mg/L)", value = 20, min = 0.01, step = 0.001)#
					),  #Brackets closing "conditionalPanel" for when NCONC >= 2#
					conditionalPanel(condition = "input.NCONC >= 3",#
						numericInput("PCONC3", "3: Concentration (mg/L)", value = 25, min = 0.01, step = 0.001)#
					),  #Brackets closing "conditionalPanel" for when NCONC >= 3#
					conditionalPanel(condition = "input.NCONC == 4",#
						numericInput("PCONC4", "4: Concentration (mg/L)", value = 10, min = 0.01, step = 0.001)#
					)	#Brackets closing "conditionalPanel" for when NCONC == 4#
				),#
				column(5,#
					numericInput("PTIME1", "1: Time after infusion started (hours):", value = 1, step = 0.5),#
					conditionalPanel(condition = "input.NCONC >= 2",#
						numericInput("PTIME2", "2: Time after infusion started (hours):", value = 5, step = 0.5)#
					),  #Brackets closing "conditionalPanel" for when NCONC >= 2#
					conditionalPanel(condition = "input.NCONC >= 3",#
						numericInput("PTIME3", "3: Time after infusion started (hours):", value = 2, step = 0.5)#
					),  #Brackets closing "conditionalPanel" for when NCONC >= 3#
					conditionalPanel(condition = "input.NCONC == 4",#
						numericInput("PTIME4", "4: Time after infusion started (hours):", value = 3, step = 0.5)#
					)  #Brackets closing "conditionalPanel" for when NCONC == 4#
				)#
			)  #Brackets closing "fixedRow"#
		),#
		tabItem(tabName = "graphs",#
			fixedRow(#
				column(4,#
					h4(strong("Simulate Concentrations for the Next 3 Doses")),#
					sliderInput("SDOSE1", "Next Dose Amount (mg):", value = 4000, min = 0, max = 5000, step = 100, width = 450),#
					sliderInput("SINFD1", "Next Infusion Duration (hours):", value = 3, min = 0.5, max = 8, step = 0.5, width = 450),#
					selectInput("SFREQ1", "Dose Frequency (hours):", choices = c("4-hourly" = 1, "6-hourly" = 2,"8-hourly" = 3), selected = 1)#
				),#
				column(8,#
					h4(strong("Piperacillin Concentration-Time Profile")),#
					plotOutput("concPlot1", height = 400, width = 750)#
				),#
				align = "center"#
			),	#Brackets closing "fixedRow"#
			hr(),#
			fixedRow(#
				column(3,#
					checkboxInput("COMP", strong("Compare to a different dosing regimen"), value = FALSE),#
					align = "center"#
				)#
			),	#Brackets closing "fixedRow"#
			conditionalPanel(condition = "input.COMP",#
				fixedRow(#
					column(4,#
						sliderInput("SDOSE2", "Next Dose Amount (mg):", value = 4000, min = 0, max = 5000, step = 100, width = 450),#
						sliderInput("SINFD2", "Next Infusion Duration (hours):", value = 3, min = 0.5, max = 8, step = 0.5, width = 450),#
						selectInput("SFREQ2", "Dose Frequency (hours):", choices = c("4-hourly" = 1, "6-hourly" = 2,"8-hourly" = 3), selected = 1)#
					),#
					column(8,#
						plotOutput("concPlot2", height = 400, width = 750)#
					),#
					align = "center"			#
				)	#Brackets closing "fixedRow"#
			)  #Brackets closing "conditionalPanel"#
		),#
		tabItem(tabName = "model"#
		)#
	)  #Brackets closing "tabItems"#
)  #Brackets closing "body"#
#
#User-interface Object#
ui <- dashboardPage(header, sidebar, body, skin = "purple")#
#
#-------------------------------------------------------------------------------------#
#Run the Shiny application#
shinyApp(ui,server)
#Script for simulating a population from a PK/PD model for melphalan#
#------------------------------------------------------------------------------------#
#Remove all current objects in the workspace#
rm(list=ls(all=TRUE))#
#
#Load package libraries#
library(R2HTML)#
library(ggplot2)#
library(doBy)#
library(stringr)#
library(Hmisc)#
library(grid)#
library(plyr)#
library(reshape2)#
#
#Use custom ggplot2 theme#
theme_bw2 <- theme_set(theme_bw(base_size = 16))  #
theme_bw2 <- theme_update(plot.margin = unit(c(1.1,1.1,3,1.1), "lines"),#
axis.title.x=element_text(size = 16, vjust = 0),#
axis.title.y=element_text(size = 16, vjust = 0, angle = 90),#
strip.text.x=element_text(size = 14),#
strip.text.y=element_text(size = 14, angle = 90))#
#------------------------------------------------------------------------------------#
#Set working directory#
setwd("/Volumes/Prosecutor/Melphalan/Simulation/")#
#
#Source functions_utility	#
source("functions_utility.R")#
#
#------------------------------------------------------------------------------------#
#Read the original data#
ORG.data <- read.csv("PKPD_OSU11055_Neutropenia_lnplus4.csv", stringsAsFactors=F, na.strings=".")#
ORG.data <- subset(ORG.data, X.Note != "#")#
ORG.data <- ORG.data[,-1]	#Delete the "Notes" column#
#Run name#
runname <- "119pt_PKPD_Neutropenia_INPUTdelay_sim100"#
#Process the fit file#
#processSIMdata(paste(runname,".ctl",sep=""))#
#Read the simulated data#
SIM.data <- read.csv(paste(runname,".nm7/",runname,".fit.csv",sep=""), stringsAsFactors=F)#
#Change working directory#
setwd(paste(master.dir,"/",runname,".nm7",sep="")) #
#
#------------------------------------------------------------------------------------#
#Subset PK and PD data#
ORG.data$TIME <- as.numeric(ORG.data$TIME)#
ORG.data$DV <- as.numeric(ORG.data$DV)#
ORG.PK.data <- subset(ORG.data, DVID != 2)#
ORG.PD.data <- subset(ORG.data, DVID == 2)#
#Bin time - ORG.PK.data#
ORG.PK.data$TIMEBIN <- cut2(ORG.PK.data$TIME, g=10, levels.mean=T)#
ORG.PK.data$TIMEBIN <- as.numeric(paste(ORG.PK.data$TIMEBIN))#
#Bin time - ORG.PD.data#
ORG.PD.data$TIMEBIN <- cut2(ORG.PD.data$TIME, g=10, levels.mean=T)#
ORG.PD.data$TIMEBIN <- as.numeric(paste(ORG.PD.data$TIMEBIN))#
#------------------------------------------------------------------------------------#
#Bin time - SIM.data#
#Subset PK and PD data#
SIM.PK.data <- subset(SIM.data, DVID != 2)#
SIM.PD.data <- subset(SIM.data, DVID == 2)#
#Bin time - ORG.PK.data#
SIM.PK.data$TIMEBIN <- cut2(SIM.PK.data$TIME, g=10, levels.mean=T)#
SIM.PK.data$TIMEBIN <- as.numeric(paste(SIM.PK.data$TIMEBIN))#
#Bin time - ORG.PD.data#
SIM.PD.data$TIMEBIN <- cut2(SIM.PD.data$TIME, g=10, levels.mean=T)#
SIM.PD.data$TIMEBIN <- as.numeric(paste(SIM.PD.data$TIMEBIN))
unique(SIM.PD.data$TIMEBIN)
SIM.PD.data$TIMEBIN <- cut2(SIM.PD.data$TIME, g=10, levels.mean=T)
unique(SIM.PD.data$TIMEBIN)
SIM.PD.data$TIMEBIN <- cut2(SIM.PD.data$TIME, g=10, levels.mean=F)
unique(SIM.PD.data$TIMEBIN)
